<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>SOAP-Lite</Name>
    <Version>0.713_01</Version>
    <Vendor>OTRS AG</Vendor>
    <URL>http://otrs.org/</URL>
    <License>GPL 1</License>
    <Description Lang="en">Provides SOAP::Lite 0.713 unofficial patched release, to have a working SOAP interface..</Description>
    <Framework>2.4.x</Framework>
    <Framework>3.0.x</Framework>
    <BuildDate>2011-03-04 11:26:40</BuildDate>
    <BuildHost>yourhost.example.com</BuildHost>
    <Filelist>
        <File Location="Kernel/cpan-lib/SOAP/Constants.pm" Permission="644" Encode="Base64">IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyBDb3B5cmlnaHQgKEMpIDIwMDAtMjAwNCBQYXVsIEt1bGNoZW5rbyAocGF1bGNsaW5nZXJAeWFob28uY29tKQojCiMgU09BUDo6TGl0ZSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdAojIGFuZC9vciBtb2RpZnkgaXQgdW5kZXIgdGhlIHNhbWUgdGVybXMgYXMgUGVybCBpdHNlbGYuCiMKIyAkSWQ6IENvbnN0YW50cy5wbSAzNzQgMjAxMC0wNS0xNCAwODoxMjoyNVoga3V0dGVybWEgJAojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQpwYWNrYWdlIFNPQVA6OkNvbnN0YW50czsKdXNlIHN0cmljdDsKdXNlIFNPQVA6OkxpdGU7CgpvdXIgJFZFUlNJT04gPSAwLjcxM18wMTsKCnVzZSBjb25zdGFudCAgICBVUklfMTk5OV9TQ0hFTUFfWFNEICAgID0+ICJodHRwOi8vd3d3LnczLm9yZy8xOTk5L1hNTFNjaGVtYSI7CnVzZSBjb25zdGFudCAgICBVUklfMTk5OV9TQ0hFTUFfWFNJICAgID0+ICJodHRwOi8vd3d3LnczLm9yZy8xOTk5L1hNTFNjaGVtYS1pbnN0YW5jZSI7CnVzZSBjb25zdGFudCAgICBVUklfMjAwMF9TQ0hFTUFfWFNEICAgID0+ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzEwL1hNTFNjaGVtYSI7CnVzZSBjb25zdGFudCAgICBVUklfMjAwMF9TQ0hFTUFfWFNJICAgID0+ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzEwL1hNTFNjaGVtYS1pbnN0YW5jZSI7CnVzZSBjb25zdGFudCAgICBVUklfMjAwMV9TQ0hFTUFfWFNEICAgID0+ICJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSI7CnVzZSBjb25zdGFudCAgICBVUklfMjAwMV9TQ0hFTUFfWFNJICAgID0+ICJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSI7CnVzZSBjb25zdGFudCAgICBVUklfTElURVJBTF9FTkMgICAgICAgID0+ICIiOwp1c2UgY29uc3RhbnQgICAgVVJJX1NPQVAxMV9FTkMgICAgICAgICA9PiAiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbmNvZGluZy8iOwp1c2UgY29uc3RhbnQgICAgVVJJX1NPQVAxMV9FTlYgICAgICAgICA9PiAiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iOwp1c2UgY29uc3RhbnQgICAgVVJJX1NPQVAxMV9ORVhUX0FDVE9SICA9PiAiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9hY3Rvci9uZXh0IjsKdXNlIGNvbnN0YW50ICAgIFVSSV9TT0FQMTJfRU5DICAgICAgICAgPT4gImh0dHA6Ly93d3cudzMub3JnLzIwMDMvMDUvc29hcC1lbmNvZGluZyI7CnVzZSBjb25zdGFudCAgICBVUklfU09BUDEyX0VOViAgICAgICAgID0+ICJodHRwOi8vd3d3LnczLm9yZy8yMDAzLzA1L3NvYXAtZW52ZWxvcGUiOwp1c2UgY29uc3RhbnQgICAgVVJJX1NPQVAxMl9OT0VOQyAgICAgICA9PiAiaHR0cDovL3d3dy53My5vcmcvMjAwMy8wNS9zb2FwLWVudmVsb3BlL2VuY29kaW5nL25vbmUiOwp1c2UgY29uc3RhbnQgICAgVVJJX1NPQVAxMl9ORVhUX0FDVE9SICA9PiAiaHR0cDovL3d3dy53My5vcmcvMjAwMy8wNS9zb2FwLWVudmVsb3BlL3JvbGUvbmV4dCI7Cgp1c2UgdmFycyBxdygkTlNNQVNLICRFTE1BU0spOwoKJE5TTUFTSyA9ICdbYS16QS1aXzpdW1x3LlwtOl0qJzsKJEVMTUFTSyA9ICdeKD8hW3hYXVttTV1bbExdKVthLXpBLVpfXVtcdy5cLV0qJCc7Cgp1c2UgdmFycyBxdygkTkVYVF9BQ1RPUiAkTlNfRU5WICROU19FTkMgJE5TX0FQUwogICAgJEZBVUxUX0NMSUVOVCAkRkFVTFRfU0VSVkVSICRGQVVMVF9WRVJTSU9OX01JU01BVENICiAgICAkSFRUUF9PTl9GQVVMVF9DT0RFICRIVFRQX09OX1NVQ0NFU1NfQ09ERSAkRkFVTFRfTVVTVF9VTkRFUlNUQU5ECiAgICAkTlNfWFNJX0FMTCAkTlNfWFNJX05JTFMgJVhNTF9TQ0hFTUFTICRERUZBVUxUX1hNTF9TQ0hFTUEKICAgICRERUZBVUxUX0hUVFBfQ09OVEVOVF9UWVBFCiAgICAkU09BUF9WRVJTSU9OICVTT0FQX1ZFUlNJT05TICRXUk9OR19WRVJTSU9OCiAgICAkTlNfU0xfSEVBREVSICROU19TTF9QRVJMVFlQRSAkUFJFRklYX0VOViAkUFJFRklYX0VOQwogICAgJERPX05PVF9VU0VfWE1MX1BBUlNFUiAkRE9fTk9UX0NIRUNLX01VU1RVTkRFUlNUQU5ECiAgICAkRE9fTk9UX1VTRV9DSEFSU0VUICRET19OT1RfUFJPQ0VTU19YTUxfSU5fTUlNRQogICAgJERPX05PVF9VU0VfTFdQX0xFTkdUSF9IQUNLICRET19OT1RfQ0hFQ0tfQ09OVEVOVF9UWVBFCiAgICAkTUFYX0NPTlRFTlRfU0laRSAkUEFUQ0hfSFRUUF9LRUVQQUxJVkUgJERFRkFVTFRfUEFDS0FHRVIKICAgIEBTVVBQT1JURURfRU5DT0RJTkdfU1RZTEVTICRPQkpTX0JZX1JFRl9LRUVQQUxJVkUKICAgICRERUZBVUxUX0NBQ0hFX1RUTAogICAgJVhNTF9TQ0hFTUFfT0YKKTsKCiRGQVVMVF9DTElFTlQgICAgICAgICAgID0gJ0NsaWVudCc7CiRGQVVMVF9TRVJWRVIgICAgICAgICAgID0gJ1NlcnZlcic7CiRGQVVMVF9WRVJTSU9OX01JU01BVENIID0gJ1ZlcnNpb25NaXNtYXRjaCc7CiRGQVVMVF9NVVNUX1VOREVSU1RBTkQgID0gJ011c3RVbmRlcnN0YW5kJzsKCiRIVFRQX09OX1NVQ0NFU1NfQ09ERSA9IDIwMDsgIyBPSwokSFRUUF9PTl9GQVVMVF9DT0RFICAgPSA1MDA7ICMgSU5URVJOQUxfU0VSVkVSX0VSUk9SCgpAU1VQUE9SVEVEX0VOQ09ESU5HX1NUWUxFUyA9ICggVVJJX0xJVEVSQUxfRU5DLFVSSV9TT0FQMTFfRU5DLFVSSV9TT0FQMTJfRU5DLFVSSV9TT0FQMTJfTk9FTkMgKTsKCiRXUk9OR19WRVJTSU9OID0gJ1dyb25nIFNPQVAgdmVyc2lvbiBzcGVjaWZpZWQuJzsKCiRTT0FQX1ZFUlNJT04gPSAnMS4xJzsKJVNPQVBfVkVSU0lPTlMgPSAoCiAgICAxLjEgPT4gewogICAgICAgIE5FWFRfQUNUT1IgICAgICAgICAgICAgICAgPT4gVVJJX1NPQVAxMV9ORVhUX0FDVE9SLAogICAgICAgIE5TX0VOViAgICAgICAgICAgICAgICAgICAgPT4gVVJJX1NPQVAxMV9FTlYsCiAgICAgICAgTlNfRU5DICAgICAgICAgICAgICAgICAgICA9PiBVUklfU09BUDExX0VOQywKICAgICAgICBERUZBVUxUX1hNTF9TQ0hFTUEgICAgICAgID0+IFVSSV8yMDAxX1NDSEVNQV9YU0QsCiAgICAgICAgREVGQVVMVF9IVFRQX0NPTlRFTlRfVFlQRSA9PiAndGV4dC94bWwnLAogICAgfSwKICAgIDEuMiA9PiB7CiAgICAgICAgTkVYVF9BQ1RPUiAgICAgICAgICAgICAgICA9PiBVUklfU09BUDEyX05FWFRfQUNUT1IsCiAgICAgICAgTlNfRU5WICAgICAgICAgICAgICAgICAgICA9PiBVUklfU09BUDEyX0VOViwKICAgICAgICBOU19FTkMgICAgICAgICAgICAgICAgICAgID0+IFVSSV9TT0FQMTJfRU5DLAogICAgICAgIERFRkFVTFRfWE1MX1NDSEVNQSAgICAgICAgPT4gVVJJXzIwMDFfU0NIRU1BX1hTRCwKICAgICAgICBERUZBVUxUX0hUVFBfQ09OVEVOVF9UWVBFID0+ICdhcHBsaWNhdGlvbi9zb2FwK3htbCcsCiAgICB9LAopOwoKIyBzY2hlbWEgbmFtZXNwYWNlcwolWE1MX1NDSEVNQVMgPSAoICMgVGhlICcoKScgaXMgbmVjZXNzYXJ5IHRvIHB1dCBjb25zdGFudHMgaW4gU0NBTEFSIGZvcm0KICAgIFVSSV8xOTk5X1NDSEVNQV9YU0QoKSA9PiAnU09BUDo6WE1MU2NoZW1hMTk5OScsCiAgICBVUklfMjAwMV9TQ0hFTUFfWFNEKCkgPT4gJ1NPQVA6OlhNTFNjaGVtYTIwMDEnLAogICAgVVJJX1NPQVAxMV9FTkMoKSAgICAgID0+ICdTT0FQOjpYTUxTY2hlbWFTT0FQMV8xJywKICAgIFVSSV9TT0FQMTJfRU5DKCkgICAgICA9PiAnU09BUDo6WE1MU2NoZW1hU09BUDFfMicsCik7CgojIHNjaGVtYSBuYW1lc3BhY2VzCiVYTUxfU0NIRU1BX09GID0gKCAjIFRoZSAnKCknIGlzIG5lY2Vzc2FyeSB0byBwdXQgY29uc3RhbnRzIGluIFNDQUxBUiBmb3JtCiAgICBVUklfMTk5OV9TQ0hFTUFfWFNEKCkgPT4gJ1hNTFNjaGVtYTE5OTknLAogICAgVVJJXzIwMDFfU0NIRU1BX1hTRCgpID0+ICdYTUxTY2hlbWEyMDAxJywKICAgIFVSSV9TT0FQMTFfRU5DKCkgICAgICA9PiAnWE1MU2NoZW1hU09BUDFfMScsCiAgICBVUklfU09BUDEyX0VOQygpICAgICAgPT4gJ1hNTFNjaGVtYVNPQVAxXzInLAopOwoKCiROU19YU0lfQUxMID0gam9pbiBqb2luKCd8JywgbWFwIHsiJF8taW5zdGFuY2UifSBncmVwIHsvWE1MU2NoZW1hL30ga2V5cyAlWE1MX1NDSEVNQVMpLCAnKD86JywgJyknOwokTlNfWFNJX05JTFMgPSBqb2luIGpvaW4oJ3wnLCBtYXAgeyBteSAkY2xhc3MgPSAkWE1MX1NDSEVNQVN7JF99IC4gJzo6U2VyaWFsaXplcic7ICJceygkXyktaW5zdGFuY2VcfSIgLiAkY2xhc3MtPm5pbFZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBncmVwIHsvWE1MU2NoZW1hL30ga2V5cyAlWE1MX1NDSEVNQVMpLAogICAgICAgICAgICAgICAgICAnKD86JywgJyknOwoKIyBBcGFjaGVTT0FQIG5hbWVzcGFjZXMKJE5TX0FQUyA9ICdodHRwOi8veG1sLmFwYWNoZS5vcmcveG1sLXNvYXAnOwoKIyBTT0FQOjpMaXRlIG5hbWVzcGFjZQokTlNfU0xfSEVBREVSICAgPSAnaHR0cDovL25hbWVzcGFjZXMuc29hcGxpdGUuY29tL2hlYWRlcic7CiROU19TTF9QRVJMVFlQRSA9ICdodHRwOi8vbmFtZXNwYWNlcy5zb2FwbGl0ZS5jb20vcGVybCc7CgojIGRlZmF1bHQgcHJlZml4ZXMKJFBSRUZJWF9FTlYgPSAnc29hcCc7CiRQUkVGSVhfRU5DID0gJ3NvYXBlbmMnOwoKIyBvdGhlcnMKJERPX05PVF9VU0VfWE1MX1BBUlNFUiA9IDA7CiRET19OT1RfQ0hFQ0tfTVVTVFVOREVSU1RBTkQgPSAwOwokRE9fTk9UX1VTRV9DSEFSU0VUID0gMDsKJERPX05PVF9QUk9DRVNTX1hNTF9JTl9NSU1FID0gMDsKJERPX05PVF9VU0VfTFdQX0xFTkdUSF9IQUNLID0gMDsKJERPX05PVF9DSEVDS19DT05URU5UX1RZUEUgPSAwOwokUEFUQ0hfSFRUUF9LRUVQQUxJVkUgPSAxOwokT0JKU19CWV9SRUZfS0VFUEFMSVZFID0gNjAwOyAjIHNlY29uZHMKCiMgVE9ETyAtIHVzZSBkZWZhdWx0IHBhY2thZ2VyIGNvbnN0YW50IHNvbWV3aGVyZQokREVGQVVMVF9QQUNLQUdFUiA9ICJTT0FQOjpQYWNrYWdlcjo6TUlNRSI7CiRERUZBVUxUX0NBQ0hFX1RUTCA9IDA7CgoxOwoKX19FTkRfXwoKPXBvZAoKPWhlYWQxIE5BTUUKClNPQVA6OkNvbnN0YW50cyAtIFNPQVA6OkxpdGUgcHJvdmlkZXMgc2V2ZXJhbCB2YXJpYWJsZXMgdG8gYWxsb3dzIHByb2dyYW1tZXJzIGFuZCB1c2VycyB0byBtb2RpZnkgdGhlIGJlaGF2aW9yIG9mIFNPQVA6OkxpdGUgaW4gc3BlY2lmaWMgd2F5cy4KCj1oZWFkMSBERVNDUklQVElPTgoKQSBudW1iZXIgb2YgImNvbnN0YW50IiB2YWx1ZXMgYXJlIHByb3ZpZGVkIGJ5IG1lYW5zIG9mIHRoaXMgbmFtZXNwYWNlLiBUaGUgdmFsdWVzIGFyZW4ndCBjb25zdGFudHMgaW4gdGhlIHN0cmljdGVzdCBzZW5zZTsgdGhlIHB1cnBvc2Ugb2YgdGhlIHZhbHVlcyBkZXRhaWxlZCBoZXJlIGlzIHRvIGFsbG93IHRoZSBhcHBsaWNhdGlvbiB0byBjaGFuZ2UgdGhlbSBpZiBpdCBkZXNpcmVzIHRvIGFsdGVyIHRoZSBzcGVjaWZpYyBiZWhhdmlvciBnb3Zlcm5lZC4KCj1oZWFkMSBDT05TVEFOVFMKCj1oZWFkMiAkRE9fTk9UX1VTRV9YTUxfUEFSU0VSCgpUaGUgU09BUDo6TGl0ZSBwYWNrYWdlIGF0dGVtcHRzIHRvIGxvY2F0ZSBhbmQgdXNlIHRoZSBMPFhNTDo6UGFyc2VyPiBwYWNrYWdlLCBmYWxsaW5nIGJhY2sgb24gYW4gaW50ZXJuYWwsIHB1cmUtUGVybCBwYXJzZXIgaW4gaXRzIGFic2VuY2UuIFRoaXMgcGFja2FnZSBpcyBhIGZhc3QgcGFyc2VyLCBiYXNlZCBvbiB0aGUgRXhwYXQgcGFyc2VyIGRldmVsb3BlZCBieSBKYW1lcyBDbGFyay4gSWYgdGhlIGFwcGxpY2F0aW9uIHNldHMgdGhpcyB2YWx1ZSB0byAxLCB0aGVyZSB3aWxsIGJlIG5vIGF0dGVtcHQgdG8gbG9jYXRlIG9yIHVzZSBYTUw6OlBhcnNlci4gVGhlcmUgYXJlIHNldmVyYWwgcmVhc29ucyB5b3UgbWlnaHQgY2hvb3NlIHRvIGRvIHRoaXMuIElmIHRoZSBwYWNrYWdlIHdpbGwgbmV2ZXIgYmUgbWFkZSBhdmFpbGFibGUsIHRoZXJlIGlzIG5vIHJlYXNvbiB0byBwZXJmb3JtIHRoZSB0ZXN0LiBTZXR0aW5nIHRoaXMgcGFyYW1ldGVyIGlzIGxlc3MgdGltZS1jb25zdW1pbmcgdGhhbiB0aGUgdGVzdCBmb3IgdGhlIHBhY2thZ2Ugd291bGQgYmUuIEFsc28sIHRoZSBYTUw6OlBhcnNlciBjb2RlIGxpbmtzIGFnYWluc3QgdGhlIEV4cGF0IGxpYnJhcmllcyBmb3IgdGhlIEMgbGFuZ3VhZ2UuIEluIHNvbWUgZW52aXJvbm1lbnRzLCB0aGlzIGNvdWxkIGNhdXNlIGEgcHJvYmxlbSB3aGVuIG1peGVkIHdpdGggb3RoZXIgYXBwbGljYXRpb25zIHRoYXQgbWF5IGJlIGxpbmtlZCBhZ2FpbnN0IGEgZGlmZmVyZW50IHZlcnNpb24gb2YgdGhlIHNhbWUgbGlicmFyaWVzLiBUaGlzIHdhcyBvbmNlIHRoZSBjYXNlIHdpdGggY2VydGFpbiBjb21iaW5hdGlvbnMgb2YgQXBhY2hlLCBtb2RfcGVybCBhbmQgWE1MOjpQYXJzZXIuCgo9aGVhZDIgJERPX05PVF9VU0VfQ0hBUlNFVAoKVW5sZXNzIHRoaXMgcGFyYW1ldGVyIGlzIHNldCB0byAxLCBvdXRnb2luZyBDb250ZW50LVR5cGUgaGVhZGVycyB3aWxsIGluY2x1ZGUgc3BlY2lmaWNhdGlvbiBvZiB0aGUgY2hhcmFjdGVyIHNldCB1c2VkIGluIGVuY29kaW5nIHRoZSBtZXNzYWdlIGl0c2VsZi4gTm90IGFsbCBlbmRwb2ludHMgKGNsaWVudCBvciBzZXJ2ZXIpIG1heSBiZSBhYmxlIHRvIHByb3Blcmx5IGRlYWwgd2l0aCB0aGF0IGRhdGEgb24gdGhlIGNvbnRlbnQgaGVhZGVyLCBob3dldmVyLiBJZiBkZWFsaW5nIHdpdGggYW4gZW5kcG9pbnQgdGhhdCBleHBlY3RzIHRvIGRvIGEgbW9yZSBsaXRlcmFsIGV4YW1pbmF0aW9uIG9mIHRoZSBoZWFkZXIgYXMgd2hvbGUgKGFzIG9wcG9zZWQgdG8gZnVsbHkgcGFyc2luZyBpdCksIHRoaXMgcGFyYW1ldGVyIG1heSBwcm92ZSB1c2VmdWwuCgo9aGVhZDIgJERPX05PVF9DSEVDS19DT05URU5UX1RZUEUKClRoZSBjb250ZW50LXR5cGUgaXRzZWxmIGZvciBhIFNPQVAgbWVzc2FnZSBpcyByYXRoZXIgY2xlYXJseSBkZWZpbmVkLCBhbmQgaW4gbW9zdCBjYXNlcywgYW4gYXBwbGljYXRpb24gd291bGQgaGF2ZSBubyByZWFzb24gdG8gZGlzYWJsZSB0aGUgdGVzdGluZyBvZiB0aGF0IGhlYWRlci4gVGhpcyBoYXZpbmcgYmVlbiBzYWlkLCB0aGUgY29udGVudC10eXBlIGZvciBTT0FQIDEuMiBpcyBzdGlsbCBvbmx5IGEgcmVjb21tZW5kZWQgZHJhZnQsIGFuZCBiYWRseSBjb2RlZCBlbmRwb2ludHMgbWlnaHQgc2VuZCB2YWxpZCBtZXNzYWdlcyB3aXRoIGludmFsaWQgQ29udGVudC1UeXBlIGhlYWRlcnMuIFdoaWxlIHRoZSAicmlnaHQiIHRoaW5nIHRvIGRvIHdvdWxkIGJlIHRvIHJlamVjdCBzdWNoIG1lc3NhZ2VzLCB0aGF0IGlzbid0IGFsd2F5cyBhbiBvcHRpb24uIFNldHRpbmcgdGhpcyBwYXJhbWV0ZXIgdG8gMSBhbGxvd3MgdGhlIHRvb2xraXQgdG8gc2tpcCB0aGUgY29udGVudC10eXBlIHRlc3QuCgo9aGVhZDIgJFBBVENIX0hUVFBfS0VFUEFMSVZFCgpTT0FQOjpMaXRlJ3MgSFRUUCBUcmFuc3BvcnQgbW9kdWxlIGF0dGVtcHRzIHRvIHByb3ZpZGUgYSBzaW1wbGUgcGF0Y2ggdG8KTFdQOjpQcm90b2NvbCB0byBlbmFibGUgSFRUUCBLZWVwIEFsaXZlLiBCeSBkZWZhdWx0LCB0aGlzIHBhdGNoIGlzIHR1cm5lZApvZmYsIGlmIGhvd2V2ZXIgeW91IHdvdWxkIGxpa2UgdG8gdHVybiBvbiB0aGUgZXhwZXJpbWVudGFsIHBhdGNoIGNoYW5nZSB0aGUKY29uc3RhbnQgbGlrZSBzbzoKCiAgJFNPQVA6OkNvbnN0YW50czo6UEFUQ0hfSFRUUF9LRUVQQUxJVkUgPSAxOwoKPWhlYWQxIEFDS05PV0xFREdFTUVOVFMKClNwZWNpYWwgdGhhbmtzIHRvIE8nUmVpbGx5IHB1Ymxpc2hpbmcgd2hpY2ggaGFzIGdyYWNpb3VzbHkgYWxsb3dlZCBTT0FQOjpMaXRlIHRvIHJlcHVibGlzaCBhbmQgcmVkaXN0cmlidXRlIGxhcmdlIGV4Y2VycHRzIGZyb20gSTxQcm9ncmFtbWluZyBXZWIgU2VydmljZXMgd2l0aCBQZXJsPiwgbWFpbmx5IHRoZSBTT0FQOjpMaXRlIHJlZmVyZW5jZSBmb3VuZCBpbiBBcHBlbmRpeCBCLgoKPWhlYWQxIENPUFlSSUdIVAoKQ29weXJpZ2h0IChDKSAyMDAwLTIwMDQgUGF1bCBLdWxjaGVua28uIEFsbCByaWdodHMgcmVzZXJ2ZWQuCgpUaGlzIGxpYnJhcnkgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQppdCB1bmRlciB0aGUgc2FtZSB0ZXJtcyBhcyBQZXJsIGl0c2VsZi4KCj1oZWFkMSBBVVRIT1JTCgpQYXVsIEt1bGNoZW5rbyAocGF1bGNsaW5nZXJAeWFob28uY29tKQoKUmFuZHkgSi4gUmF5IChyanJheUBibGFja3BlcmwuY29tKQoKQnlybmUgUmVlc2UgKGJ5cm5lQG1ham9yZG9qby5jb20pCgo9Y3V0Cg==</File>
        <File Location="Kernel/cpan-lib/SOAP/Lite.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/cpan-lib/SOAP/Packager.pm" Permission="644" Encode="Base64">IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyBDb3B5cmlnaHQgKEMpIDIwMDAtMjAwNCBQYXVsIEt1bGNoZW5rbyAocGF1bGNsaW5nZXJAeWFob28uY29tKQojIFNPQVA6OkxpdGUgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQKIyBhbmQvb3IgbW9kaWZ5IGl0IHVuZGVyIHRoZSBzYW1lIHRlcm1zIGFzIFBlcmwgaXRzZWxmLgojCiMgJElkOiBQYWNrYWdlci5wbSAzNzIgMjAxMC0wNC0yOSAxODozMjozMVoga3V0dGVybWEgJAojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKcGFja2FnZSBTT0FQOjpQYWNrYWdlcjsKCnVzZSBzdHJpY3Q7CnVzZSB2YXJzOwoKb3VyICRWRVJTSU9OID0gMC43MTNfMDE7Cm91ciAkU1VQUE9SVEVEX1RZUEVTID0geyB9OwoKc3ViIEJFR0lOIHsKICBubyBzdHJpY3QgJ3JlZnMnOwogIGZvciBteSAkbWV0aG9kICggcXcocGFyc2VyIGhlYWRlcnNfaHR0cCBwZXJzaXN0X3BhcnRzKSApIHsKICAgIG15ICRmaWVsZCA9ICdfJyAuICRtZXRob2Q7CiAgICAqJG1ldGhvZCA9IHN1YiB7CiAgICAgIG15ICRzZWxmID0gc2hpZnQ7CiAgICAgIGlmIChAXykgeyAkc2VsZi0+eyRmaWVsZH0gPSBzaGlmdDsgcmV0dXJuICRzZWxmIH0KICAgICAgcmV0dXJuICRzZWxmLT57JGZpZWxkfTsKICAgIH0KICB9Cn0KCnN1YiBuZXcgewogICAgbXkoJGNsYXNzKSAgPSBzaGlmdDsKICAgIG15KCVwYXJhbXMpID0gQF87CiAgICBibGVzcyB7CiAgICAgICAgIl9wYXJ0cyIgICAgICAgICA9PiBbIF0sCiAgICAgICAgIl9wYXJzZXIiICAgICAgICA9PiB1bmRlZiwKICAgICAgICAiX3BlcnNpc3RfcGFydHMiID0+IDAsCiAgICB9LCAkY2xhc3M7Cn0KCnN1YiBpc19zdXBwb3J0ZWRfcGFydCB7CiAgbXkgJHNlbGYgPSBzaGlmdDsKICByZXR1cm4gJFNVUFBPUlRFRF9UWVBFUy0+e3JlZiAkX1swXX07Cn0KCnN1YiBwYXJ0cyB7CiAgbXkgJHNlbGYgPSBzaGlmdDsKICBpZiAoQF8pIHsKICAgICRzZWxmLT57J19wYXJ0cyd9ID0gc2hpZnQ7CiAgfQogIHJldHVybiAkc2VsZi0+eydfcGFydHMnfTsKfQoKIyBUaGlzIGlzIGEgc3RhdGljIG1ldGhvZCB0aGF0IGhlbHBzIGZpbmQgdGhlIHJpZ2h0IFBhY2thZ2VyCnN1YiBmaW5kX3BhY2thZ2VyIHsKICAgIyBUT0RPIC0gSW5wdXQ6CiAgICMgICAgICAgICogdGhlIG1pbWV0eXBlIG9mIHRoZSBkYXRhIHRvIGJlIGRlY29kZWQgcmF3IGRhdGEgdGhhdCBuZWVkcwogICAjICAgICAgICAqIHRoZSBkYXRhIHRvIGJlIGRlY29kZWQKICAgIyAgICAgICAgUmV0dXJuczoKICAgIyAgICAgICAgKiB0aGUgcHJvcGVyIFNPQVA6OlBhY2thZ2VyIGluc3RhbmNlCn0KCnN1YiBwdXNoX3BhcnQgewogICBteSAkc2VsZiA9IHNoaWZ0OwogICBteSAoJHBhcnQpID0gQF87CiAgIHB1c2ggQHskc2VsZi0+eydfcGFydHMnfX0sICRwYXJ0Owp9CgpzdWIgcGFja2FnZSB7CiAgICAjIGRvIG5vdGhpbmcKICAgIGRpZSAiU09BUDo6UGFja2FnZXI6OnBhY2thZ2UoKSBtdXN0IGJlIGltcGxlbWVudGVkIjsKfQoKc3ViIHVucGFja2FnZSB7CiAgIG15ICRzZWxmID0gc2hpZnQ7CiAgICRzZWxmLT57J19wYXJ0cyd9ID0gW10gaWYgISRzZWxmLT5wZXJzaXN0X3BhcnRzOyAjIGV4cGVyaW1lbnRhbAp9CgojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCnBhY2thZ2UgU09BUDo6UGFja2FnZXI6Ok1JTUU7Cgp1c2Ugc3RyaWN0Owp1c2UgdmFycyBxdyhASVNBKTsKQElTQSA9IHF3KFNPQVA6OlBhY2thZ2VyKTsKCnN1YiBCRUdJTiB7CiAgbm8gc3RyaWN0ICdyZWZzJzsKICBmb3IgbXkgJG1ldGhvZCAoIHF3KHRyYW5zZmVyX2VuY29kaW5nIGVudl9pZCBlbnZfbG9jYXRpb24pICkgewogICAgbXkgJGZpZWxkID0gJ18nIC4gJG1ldGhvZDsKICAgICokbWV0aG9kID0gc3ViIHsKICAgICAgbXkgJHNlbGYgPSBzaGlmdDsKICAgICAgaWYgKEBfKSB7ICRzZWxmLT57JGZpZWxkfSA9IHNoaWZ0OyByZXR1cm4gJHNlbGYgfQogICAgICByZXR1cm4gJHNlbGYtPnskZmllbGR9OwogICAgfQogIH0KfQoKc3ViIG5ldyB7CiAgICBteSAoJGNsYXNzbmFtZSkgPSBAXzsKICAgIG15ICRzZWxmID0gU09BUDo6UGFja2FnZXI6Om5ldyhAXyk7CiAgICAkc2VsZi0+eydfY29udGVudF9lbmNvZGluZyd9ID0gJzhiaXQnOwogICAgJHNlbGYtPnsnX2Vudl9pZCd9ICAgICAgICAgICA9ICc8bWFpbl9lbnZlbG9wZT4nOwogICAgJHNlbGYtPnsnX2Vudl9sb2NhdGlvbid9ICAgICA9ICcvbWFpbl9lbnZlbG9wZSc7CiAgICBibGVzcyAkc2VsZiwgJGNsYXNzbmFtZTsKICAgICRTT0FQOjpQYWNrYWdlcjo6U1VQUE9SVEVEX1RZUEVTLT57Ik1JTUU6OkVudGl0eSJ9ID0gMTsKICAgIHJldHVybiAkc2VsZjsKfQoKc3ViIGluaXRpYWxpemVfcGFyc2VyIHsKICBteSAkc2VsZiA9IHNoaWZ0OwogIGV2YWwgInJlcXVpcmUgTUlNRTo6UGFyc2VyOyI7CiAgZGllICJDb3VsZCBub3QgZmluZCBNSU1FOjpQYXJzZXIgLSBpcyBNSU1FOjpUb29scyBpbnN0YWxsZWQ/IEFib3J0aW5nLiIgaWYgJEA7CiAgJHNlbGYtPnsnX3BhcnNlcid9ID0gTUlNRTo6UGFyc2VyLT5uZXc7CiAgJHNlbGYtPnsnX3BhcnNlcid9LT5vdXRwdXRfdG9fY29yZSgnQUxMJyk7CiAgJHNlbGYtPnsnX3BhcnNlcid9LT50bXBfdG9fY29yZSgxKTsKICAkc2VsZi0+eydfcGFyc2VyJ30tPmlnbm9yZV9lcnJvcnMoMSk7Cn0KCnN1YiBnZW5lcmF0ZV9yYW5kb21fc3RyaW5nIHsKICBteSAoJHNlbGYsJGxlbikgPSBAXzsKICBteSBAY2hhcnM9KCdhJy4uJ3onLCdBJy4uJ1onLCcwJy4uJzknLCdfJyk7CiAgbXkgJHJhbmRvbV9zdHJpbmc7CiAgZm9yZWFjaCAoMS4uJGxlbikgewogICAgJHJhbmRvbV9zdHJpbmcgLj0gJGNoYXJzW3JhbmQgQGNoYXJzXTsKICB9CiAgcmV0dXJuICRyYW5kb21fc3RyaW5nOwp9CgpzdWIgZ2V0X211bHRpcGFydF9pZCB7CiAgbXkgKCRpZCkgPSBzaGlmdDsKICAoJGlkIHx8ICcnKSA9fiAvXjw/KFtePl0rKT4/JC87ICQxIHx8ICcnOwp9CgpzdWIgcGFja2FnZSB7CiAgIG15ICRzZWxmID0gc2hpZnQ7CiAgIG15ICgkZW52ZWxvcGUsJGNvbnRleHQpID0gQF87CiAgIHJldHVybiAkZW52ZWxvcGUgaWYgKCEkc2VsZi0+cGFydHMpOyAjIGlmIHRoZXJlIGFyZSBubyBwYXJ0cywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgdGhlbiB0aGVyZSBpcyBub3RoaW5nIHRvIGRvCiAgIHJlcXVpcmUgTUlNRTo6RW50aXR5OwogICBsb2NhbCAkTUlNRTo6RW50aXR5OjpCT1VOREFSWV9ERUxJTUlURVIgPSAiXHJcbiI7CiAgIG15ICR0b3AgPSBNSU1FOjpFbnRpdHktPmJ1aWxkKCdUeXBlJyAgICAgPT4gIk11bHRpcGFydC9SZWxhdGVkIik7CiAgIG15ICRzb2FwdmVyc2lvbiA9IGRlZmluZWQoJGNvbnRleHQpID8gJGNvbnRleHQtPnNvYXB2ZXJzaW9uIDogJzEuMSc7CiAgICR0b3AtPmF0dGFjaCgnVHlwZScgICAgICAgICAgICAgICAgICAgICAgPT4gJHNvYXB2ZXJzaW9uID09IDEuMSA/ICJ0ZXh0L3htbCIgOiAiYXBwbGljYXRpb24vc29hcCt4bWwiLAogICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHJhbnNmZXItRW5jb2RpbmcnID0+ICRzZWxmLT50cmFuc2Zlcl9lbmNvZGluZygpLAogICAgICAgICAgICAgICAgJ0NvbnRlbnQtTG9jYXRpb24nICAgICAgICAgID0+ICRzZWxmLT5lbnZfbG9jYXRpb24oKSwKICAgICAgICAgICAgICAgICdDb250ZW50LUlEJyAgICAgICAgICAgICAgICA9PiAkc2VsZi0+ZW52X2lkKCksCiAgICAgICAgICAgICAgICAnRGF0YScgICAgICAgICAgICAgICAgICAgICAgPT4gJGVudmVsb3BlICk7CiAgICMgY29uc3VtZSB0aGUgYXR0YWNobWVudHMgdGhhdCBjb21lIGluIGFzIGlucHV0IGJ5ICdzaGlmdCdpbmcKICAgbm8gc3RyaWN0ICdyZWZzJzsKICAgd2hpbGUgKG15ICRwYXJ0ID0gc2hpZnQoQHskc2VsZi0+cGFydHN9KSkgewogICAgICAkdG9wLT5hZGRfcGFydCgkcGFydCk7CiAgIH0KICAgIyBkZXRlcm1pbmUgTUlNRSBib3VuZGFyeQogICBteSAkYm91bmRhcnkgPSAkdG9wLT5oZWFkLT5tdWx0aXBhcnRfYm91bmRhcnk7CiAgICRzZWxmLT5oZWFkZXJzX2h0dHAoeyAnQ29udGVudC1UeXBlJyA9PiAnTXVsdGlwYXJ0L1JlbGF0ZWQ7IHR5cGU9InRleHQveG1sIjsgc3RhcnQ9IjxtYWluX2VudmVsb3BlPiI7IGJvdW5kYXJ5PSInLiRib3VuZGFyeS4nIid9KTsKICAgcmV0dXJuICR0b3AtPnN0cmluZ2lmeV9ib2R5Owp9CgpzdWIgdW5wYWNrYWdlIHsKICBteSAkc2VsZiA9IHNoaWZ0OwogIG15ICgkcmF3X2lucHV0LCRjb250ZXh0KSA9IEBfOwogICRzZWxmLT5TVVBFUjo6dW5wYWNrYWdlKCk7CgogICMgUGFyc2UgdGhlIHJhdyBpbnB1dCBpbnRvIGEgTUlNRTo6RW50aXR5IHN0cnVjdHVyZS4KICAjICAgLSBmYWlsIGlmIHRoZSByYXdfaW5wdXQgaXMgbm90IE1JTUUgZm9ybWF0dGVkCiAgJHNlbGYtPmluaXRpYWxpemVfcGFyc2VyKCkgaWYgIWRlZmluZWQoJHNlbGYtPnBhcnNlcik7CiAgbXkgJGVudGl0eSA9IGV2YWwgeyAkc2VsZi0+cGFyc2VyLT5wYXJzZV9kYXRhKCRyYXdfaW5wdXQpIH0KICAgIG9yIGRpZSAiU29tZXRoaW5nIHdyb25nIHdpdGggTUlNRSBtZXNzYWdlOiBAe1skQCB8fCAkc2VsZi0+cGFyc2VyLT5sYXN0X2Vycm9yXX1cbiI7CgogIG15ICRlbnYgPSB1bmRlZjsKICAjIG1ham9yIG1lbW9yeSBibG9hdCBiZWxvdyEgVE9ETyAtIGZpeCEKICBpZiAobGMoJGVudGl0eS0+aGVhZC0+bWltZV90eXBlKSBlcSAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScpIHsKICAgICRlbnYgPSAkc2VsZi0+cHJvY2Vzc19mb3JtX2RhdGEoJGVudGl0eSk7CiAgfSBlbHNpZiAobGMoJGVudGl0eS0+aGVhZC0+bWltZV90eXBlKSBlcSAnbXVsdGlwYXJ0L3JlbGF0ZWQnKSB7CiAgICAkZW52ID0gJHNlbGYtPnByb2Nlc3NfcmVsYXRlZCgkZW50aXR5KTsKICB9IGVsc2lmIChsYygkZW50aXR5LT5oZWFkLT5taW1lX3R5cGUpIGVxICd0ZXh0L3htbCcpIHsKICAgICMgSSBkb24ndCB0aGluayB0aGlzIGV2ZXIgZ2V0cyBjYWxsZWQuCiAgICAjIHdhcm4gIkkgYW0gc29tZXdoZXJlIGluIHRoZSBTT0FQOjpQYWNrYWdlcjo6TUlNRSBjb2RlIEkgZGlkbid0IGtub3cgSSB3b3VsZCBiZSBpbiEiOwogICAgJGVudiA9ICRlbnRpdHktPmJvZHloYW5kbGUtPmFzX3N0cmluZzsKICB9IGVsc2UgewogICAgZGllICJDYW4ndCBoYW5kbGUgTUlNRSBtZXNzc2FnZSB3aXRoIHNwZWNpZmllZCB0eXBlIChAe1skZW50aXR5LT5oZWFkLT5taW1lX3R5cGVdfSlcbiI7CiAgfQoKICAjIHJldHVybiB0aGUgZW52ZWxvcGUKICBpZiAoJGVudikgewogICAgcmV0dXJuICRlbnY7CiAgfSBlbHNpZiAoJGVudGl0eS0+Ym9keWhhbmRsZS0+YXNfc3RyaW5nKSB7CiAgICByZXR1cm4gJGVudGl0eS0+Ym9keWhhbmRsZS0+YXNfc3RyaW5nOwogIH0gZWxzZSB7CiAgICBkaWUgIk5vIGNvbnRlbnQgaW4gTUlNRSBtZXNzYWdlXG4iOwogIH0KfQoKc3ViIHByb2Nlc3NfZm9ybV9kYXRhIHsKICBteSAoJHNlbGYsICRlbnRpdHkpID0gQF87CiAgbXkgJGVudiA9IHVuZGVmOwogIGZvcmVhY2ggbXkgJHBhcnQgKCRlbnRpdHktPnBhcnRzKSB7CiAgICBteSAkbmFtZSA9ICRwYXJ0LT5oZWFkLT5taW1lX2F0dHIoJ2NvbnRlbnQtZGlzcG9zaXRpb24ubmFtZScpOwogICAgJG5hbWUgZXEgJ3BheWxvYWQnID8KICAgICAgJGVudiA9ICRwYXJ0LT5ib2R5aGFuZGxlLT5hc19zdHJpbmcKCTogJHNlbGYtPnB1c2hfcGFydCgkcGFydCk7CiAgfQogIHJldHVybiAkZW52Owp9CgpzdWIgcHJvY2Vzc19yZWxhdGVkIHsKICBteSAkc2VsZiA9IHNoaWZ0OwogIG15ICgkZW50aXR5KSA9IEBfOwogIGRpZSAiTXVsdGlwYXJ0IE1JTUUgbWVzc2FnZXMgTVVTVCBkZWNsYXJlIE11bHRpcGFydC9SZWxhdGVkIGNvbnRlbnQtdHlwZSIKICAgIGlmICgkZW50aXR5LT5oZWFkLT5taW1lX2F0dHIoJ2NvbnRlbnQtdHlwZScpICF+IC9ebXVsdGlwYXJ0XC9yZWxhdGVkL2kpOwogICMgQXMgaXQgdHVybnMgb3V0LCB0aGUgQ29udGVudC1JRCBhbmQgc3RhcnQgcGFyYW1ldGVycyBhcmUgb3B0aW9uYWwKICAjIGFjY29yZGluZyB0byB0aGUgTUlNRSBhbmQgU09BUCBzcGVjcy4gSW4gdGhlIGV2ZW50IHRoYXQgdGhlIGhlYWQgY2Fubm90CiAgIyBiZSBmb3VuZCwgdGhlIGhlYWQvcm9vdCBlbnRpdHkgaXMgdXNlZCBhcyBhIHN0YXJ0aW5nIHBvaW50LgogICAgIyBbMTkgTWFyIDIwMDhdIE1vZGlmaWVkIGJ5IEZlbmcgTGkgPGZlbmcubGlAc3liYXNlLmNvbT4KICAgICMgQ2hlY2sgb3B0aW9uYWwgc3RhcnQgcGFyYW1ldGVyLCB0aGVuIG9wdGlvbmFsIENvbnRlbnQtSUQsIHRoZW4gY3JlYXRlL2FkZAogICAgIyBDb250ZW50LUlEICh0aGUgc2FtZSBhcHByb2FjaCBhcyBpbiBTT0FQOjpMaXRlIDAuNjYpCgogICAgI215ICRzdGFydCA9IGdldF9tdWx0aXBhcnRfaWQoJGVudGl0eS0+aGVhZC0+bWltZV9hdHRyKCdjb250ZW50LXR5cGUuc3RhcnQnKSk7CiAgICBteSAkc3RhcnQgPSBnZXRfbXVsdGlwYXJ0X2lkKCRlbnRpdHktPmhlYWQtPm1pbWVfYXR0cignY29udGVudC10eXBlLnN0YXJ0JykpCiAgICAgICAgfHwgZ2V0X211bHRpcGFydF9pZCgkZW50aXR5LT5wYXJ0cygwKS0+aGVhZC0+bWltZV9hdHRyKCdjb250ZW50LWlkJykpOwoKICBpZiAoIWRlZmluZWQoJHN0YXJ0KSB8fCAkc3RhcnQgZXEgIiIpIHsKICAgICAgJHN0YXJ0ID0gJHNlbGYtPmdlbmVyYXRlX3JhbmRvbV9zdHJpbmcoMTApOwogICAgICAkZW50aXR5LT5wYXJ0cygwKS0+aGVhZC0+YWRkKCdjb250ZW50LWlkJywkc3RhcnQpOwogIH0KICBteSAkbG9jYXRpb24gPSAkZW50aXR5LT5oZWFkLT5taW1lX2F0dHIoJ2NvbnRlbnQtbG9jYXRpb24nKSB8fAogICAgJ3RoaXNtZXNzYWdlOi8nOwogIG15ICRlbnY7CiAgZm9yZWFjaCBteSAkcGFydCAoJGVudGl0eS0+cGFydHMpIHsKICAgIG5leHQgaWYgIVVOSVZFUlNBTDo6aXNhKCRwYXJ0ID0+ICJNSU1FOjpFbnRpdHkiKTsKCiAgICAjIFdlaXJkLCB0aGUgZm9sbG93aW5nIHVzZSBvZiBoZWFkLT5nZXQoU0NBTEFSWyxJTkRFWF0pIGRvZXNuJ3Qgd29yayBhcwogICAgIyBleHBlY3RlZC4gV29yayBhcm91bmQgaXMgdG8gZWxpbWluYXRlIHRoZSBJTkRFWC4KICAgIG15ICRwaWQgPSBnZXRfbXVsdGlwYXJ0X2lkKCRwYXJ0LT5oZWFkLT5taW1lX2F0dHIoJ2NvbnRlbnQtaWQnKSk7CgogICAgIyBJZiBDb250ZW50LUlEIGlzIG5vdCBzdXBwbGllZCwgdGhlbiBnZW5lcmF0ZSBhIHJhbmRvbSBvbmUgKEhBQ0sgLSBiZWNhdXNlCiAgICAjIE1JTUU6OkVudGl0eSBkb2VzIG5vdCBkbyB0aGlzIGFzIGl0IHNob3VsZC4uLiBjb250ZW50LWlkIGlzIHJlcXVpcmVkCiAgICAjIGFjY29yZGluZyB0byBNSU1FIHNwZWNpZmljYXRpb24pCiAgICAkcGlkID0gJHNlbGYtPmdlbmVyYXRlX3JhbmRvbV9zdHJpbmcoMTApIGlmICRwaWQgZXEgJyc7CiAgICBteSAkdHlwZSA9ICRwYXJ0LT5oZWFkLT5taW1lX3R5cGU7CgogICAgIyBJZiBhIENvbnRlbnQtTG9jYXRpb24gaGVhZGVyIGNhbm5vdCBiZSBmb3VuZCwgdGhpcyB3aWxsIGxvb2sgZm9yIGFuCiAgICAjIGFsdGVybmF0aXZlIGluIHRoZSBmb2xsb3dpbmcgTUlNRSBIZWFkZXIgYXR0cmlidXRlcwogICAgbXkgJHBsb2NhdGlvbiA9ICRwYXJ0LT5oZWFkLT5nZXQoJ2NvbnRlbnQtbG9jYXRpb24nKSB8fAogICAgICAkcGFydC0+aGVhZC0+bWltZV9hdHRyKCdDb250ZW50LURpc3Bvc2l0aW9uLmZpbGVuYW1lJykgfHwKCSRwYXJ0LT5oZWFkLT5taW1lX2F0dHIoJ0NvbnRlbnQtVHlwZS5uYW1lJyk7CiAgICBpZiAoJHN0YXJ0ICYmICRwaWQgZXEgJHN0YXJ0KSB7CiAgICAgICRlbnYgPSAkcGFydC0+Ym9keWhhbmRsZS0+YXNfc3RyaW5nOwogICAgfSBlbHNlIHsKICAgICAgJHNlbGYtPnB1c2hfcGFydCgkcGFydCk7CiAgICB9CiAgfQojICBkaWUgIkNhbid0IGZpbmQgJ3N0YXJ0JyBwYXJhbWV0ZXIgaW4gbXVsdGlwYXJ0IE1JTUUgbWVzc2FnZVxuIgojICAgIGlmIEB7JHNlbGYtPnBhcnRzfSA+IDEgJiYgISRzdGFydDsKICByZXR1cm4gJGVudjsKfQoKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpwYWNrYWdlIFNPQVA6OlBhY2thZ2VyOjpESU1FOwoKdXNlIHN0cmljdDsKdXNlIHZhcnMgcXcoQElTQSk7CkBJU0EgPSBxdyhTT0FQOjpQYWNrYWdlcik7CgpzdWIgQkVHSU4gewogIG5vIHN0cmljdCAncmVmcyc7CiAgZm9yIG15ICRtZXRob2QgKCBxdyhmb28pICkgewogICAgbXkgJGZpZWxkID0gJ18nIC4gJG1ldGhvZDsKICAgICokbWV0aG9kID0gc3ViIHsKICAgICAgbXkgJHNlbGYgPSBzaGlmdDsKICAgICAgaWYgKEBfKSB7ICRzZWxmLT57JGZpZWxkfSA9IHNoaWZ0OyByZXR1cm4gJHNlbGYgfQogICAgICByZXR1cm4gJHNlbGYtPnskZmllbGR9OwogICAgfQogIH0KfQoKc3ViIG5ldyB7CiAgICBteSAoJGNsYXNzbmFtZSkgPSBAXzsKICAgIG15ICRzZWxmID0gU09BUDo6UGFja2FnZXI6Om5ldyhAXyk7CiAgICBibGVzcyAkc2VsZiwgJGNsYXNzbmFtZTsKICAgICRTT0FQOjpQYWNrYWdlcjo6U1VQUE9SVEVEX1RZUEVTLT57IkRJTUU6OlBheWxvYWQifSA9IDE7CiAgICByZXR1cm4gJHNlbGY7Cn0KCnN1YiBpbml0aWFsaXplX3BhcnNlciB7CiAgbXkgJHNlbGYgPSBzaGlmdDsKICBwcmludCBTVERFUlIgIkluaXRpYWxpemluZyBwYXJzZXJcbiI7CiAgZXZhbCAicmVxdWlyZSBESU1FOjpQYXJzZXI7IjsKICBkaWUgIkNvdWxkIG5vdCBmaW5kIERJTUU6OlBhcnNlciAtIGlzIERJTUU6OlRvb2xzIGluc3RhbGxlZD8gQWJvcnRpbmcuIiBpZiAkQDsKICAkc2VsZi0+eydfcGFyc2VyJ30gPSBESU1FOjpQYXJzZXItPm5ldzsKfQoKc3ViIHBhY2thZ2UgewogICBteSAkc2VsZiA9IHNoaWZ0OwogICBteSAoJGVudmVsb3BlLCRjb250ZXh0KSA9IEBfOwogICByZXR1cm4gJGVudmVsb3BlIGlmICghJHNlbGYtPnBhcnRzKTsgIyBpZiB0aGVyZSBhcmUgbm8gcGFydHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIHRoZW4gdGhlcmUgaXMgbm90aGluZyB0byBkbwogICByZXF1aXJlIERJTUU6Ok1lc3NhZ2U7CiAgIHJlcXVpcmUgRElNRTo6UGF5bG9hZDsKICAgbXkgJG1lc3NhZ2UgPSBESU1FOjpNZXNzYWdlLT5uZXc7CiAgIG15ICR0b3AgPSBESU1FOjpQYXlsb2FkLT5uZXc7CiAgIG15ICRzb2FwdmVyc2lvbiA9IGRlZmluZWQoJGNvbnRleHQpID8gJGNvbnRleHQtPnNvYXB2ZXJzaW9uIDogJzEuMSc7CiAgICR0b3AtPmF0dGFjaCgnTUlNRVR5cGUnID0+ICRzb2FwdmVyc2lvbiA9PSAxLjEgPwogICAgICAgICAgICAgICAgICAiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIDogImFwcGxpY2F0aW9uL3NvYXAreG1sIiwKICAgICAgICAgICAgICAgICdEYXRhJyAgICAgPT4gJGVudmVsb3BlICk7CiAgICRtZXNzYWdlLT5hZGRfcGF5bG9hZCgkdG9wKTsKICAgIyBjb25zdW1lIHRoZSBhdHRhY2htZW50cyB0aGF0IGNvbWUgaW4gYXMgaW5wdXQgYnkgJ3NoaWZ0J2luZwogICBubyBzdHJpY3QgJ3JlZnMnOwogICB3aGlsZSAobXkgJHBhcnQgPSBzaGlmdChAeyRzZWxmLT5wYXJ0c30pKSB7CiAgICAgIGRpZSAiWW91IGFyZSBvbmx5IGFsbG93ZWQgdG8gYWRkIHBhcnRzIG9mIHR5cGUgRElNRTo6UGF5bG9hZCB0byBhIERJTUU6Ok1lc3NhZ2UiCiAgICAgICAgaWYgKCEkcGFydC0+aXNhKCdESU1FOjpQYXlsb2FkJykpOwojICAgICAgcHJpbnQgU1RERVJSICJBZGRpbmcgcGF5bG9hZCB0byBESU1FIG1lc3NhZ2U6ICIucmVmKCRwYXJ0KS4iXG4iOwogICAgICAkbWVzc2FnZS0+YWRkX3BheWxvYWQoJHBhcnQpOwojICAgICAgcHJpbnQgU1RERVJSICJQYXlsb2FkJ3MgcGF5bG9hZCBpczogIi4keyRwYXJ0LT5wcmludF9jb250ZW50X2RhdGF9LiJcbiI7CiAgIH0KICAgJHNlbGYtPmhlYWRlcnNfaHR0cCh7ICdDb250ZW50LVR5cGUnID0+ICdhcHBsaWNhdGlvbi9kaW1lJyB9KTsKICAgcmV0dXJuICRtZXNzYWdlLT5wcmludF9kYXRhOwp9CgpzdWIgdW5wYWNrYWdlIHsKICBteSAkc2VsZiA9IHNoaWZ0OwogIG15ICgkcmF3X2lucHV0LCRjb250ZXh0KSA9IEBfOwogICRzZWxmLT5TVVBFUjo6dW5wYWNrYWdlKCk7CgogICMgUGFyc2UgdGhlIHJhdyBpbnB1dCBpbnRvIGEgRElNRTo6TWVzc2FnZSBzdHJ1Y3R1cmUuCiAgIyAgIC0gZmFpbCBpZiB0aGUgcmF3X2lucHV0IGlzIG5vdCBESU1FIGZvcm1hdHRlZAogIHByaW50IFNUREVSUiAicmF3X2RhdGE6ICRyYXdfaW5wdXRcbiI7CiAgJHNlbGYtPmluaXRpYWxpemVfcGFyc2VyKCkgaWYgIWRlZmluZWQoJHNlbGYtPnBhcnNlcik7CiAgbXkgJG1lc3NhZ2UgPSBldmFsIHsgJHNlbGYtPnBhcnNlci0+cGFyc2VfZGF0YShcJHJhd19pbnB1dCkgfQogICAgb3IgZGllICJTb21ldGhpbmcgd3Jvbmcgd2l0aCBESU1FIG1lc3NhZ2U6IEB7WyRAXX1cbiI7CgogICMgVGhlIGZpcnN0IHBheWxvYWQgaXMgYWx3YXlzIHRoZSBTT0FQIE1lc3NhZ2UKICAjIFRPRE8gLSBFcnJvciBjaGVjawogIG15IEBwYXlsb2FkcyA9IEB7JG1lc3NhZ2UtPnsnX1BBWUxPQURTJ319OwogIG15ICRlbnYgPSBzaGlmdChAcGF5bG9hZHMpOwogIG15ICRlbnZfc3RyID0gJGVudi0+cHJpbnRfY29udGVudF9kYXRhOwogIHByaW50IFNUREVSUiAiUmVjZWl2ZWQgdGhpcyBlbnZlbG9wZTogIi4kZW52X3N0ci4iXG4iOwogIHdoaWxlIChteSAkcCA9IHNoaWZ0KEBwYXlsb2FkcykpIHsKICAgIHByaW50IFNUREVSUiAiQWRkaW5nIHBhcnQgdG8gUGFja2FnZXJcbiI7CiAgICAkc2VsZi0+cHVzaF9wYXJ0KCRwKTsKICB9CiAgcmV0dXJuICRlbnZfc3RyOwp9CgoxOwpfX0VORF9fCgo9cG9kCgo9aGVhZDEgTkFNRQoKU09BUDo6UGFja2FnZXIgLSB0aGlzIGNsYXNzIGlzIGFuIGFic3RyYWN0IGNsYXNzIHdoaWNoIGFsbG93cyBmb3IgbXVsdGlwbGUgdHlwZXMgb2YgcGFja2FnaW5nIGFnZW50cyBzdWNoIGFzIE1JTUUgYW5kIERJTUUuCgo9aGVhZDEgREVTQ1JJUFRJT04KClRoZSBTT0FQOjpQYWNrYWdlciBjbGFzcyBpcyByZXNwb25zaWJsZSBmb3IgbWFuYWdpbmcgYSBzZXQgb2YgInBhcnRzLiIgUGFydHMgYXJlCmFkZGl0aW9uYWwgcGllY2VzIG9mIGluZm9ybWF0aW9uLCBhZGRpdGlvbmFsIGRvY3VtZW50cywgb3IgdmlydHVhbGx5IGFueXRoaW5nIHRoYXQKbmVlZHMgdG8gYmUgYXNzb2NpYXRlZCB3aXRoIHRoZSBTT0FQIEVudmVsb3BlL3BheWxvYWQuIFRoZSBwYWNrYWdlciB0aGVuIHdpbGwgdGFrZQp0aGVzZSBwYXJ0cyBhbmQgZW5jb2RlL2RlY29kZSBvciAicGFja2FnZSIvInVucGFja2FnZSIgdGhlbSBhcyB0aGV5IGNvbWUgYW5kIGdvCm92ZXIgdGhlIHdpcmUuCgo9aGVhZDEgTUVUSE9EUwoKPW92ZXIKCj1pdGVtIG5ldwoKSW5zdGFudGlhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgU09BUDo6UGFja2FnZXIuCgo9aXRlbSBwYXJ0cwoKQ29udGFpbnMgYW4gYXJyYXkgb2YgcGFydHMuIFRoZSBjb250ZW50cyBvZiB0aGlzIGFycmF5IGFuZCB0aGVpciB0eXBlcyBhcmUgY29tcGxldGVseQpkZXBlbmRlbnQgdXBvbiB0aGUgUGFja2FnZXIgYmVpbmcgdXNlZC4gRm9yIGV4YW1wbGUsIHdoZW4gdXNpbmcgTUlNRSwgdGhlIGNvbnRlbnQKb2YgdGhpcyBhcnJheSBpcyBNSU1FOjpFbnRpdHkncy4KCj1pdGVtIHB1c2hfcGFydAoKQWRkcyBhIHBhcnQgdG8gc2V0IG9mIHBhcnRzIG1hbmFnZWQgYnkgdGhlIGN1cnJlbnQgaW5zdGFuY2Ugb2YgU09BUDo6UGFja2FnZXIuCgo9aXRlbSBwYXJzZXIKClJldHVybnMgdGhlIHBhcnNlciB1c2VkIHRvIHBhcnNlIGF0dGFjaG1lbnRzIG91dCBvZiBhIGRhdGEgc3RyZWFtLgoKPWl0ZW0gaGVhZGVyc19odHRwCgpUaGlzIGlzIGEgaG9vayBpbnRvIHRoZSBIVFRQIGxheWVyLiBJdCBwcm92aWRlcyBhIHdheSBmb3IgYSBwYWNrYWdlciB0byBhZGQgYW5kL29yIG1vZGlmeQpIVFRQIGhlYWRlcnMgaW4gYSByZXF1ZXN0L3Jlc3BvbnNlLiBGb3IgZXhhbXBsZSwgbW9zdCBwYWNrYWdpbmcgbGF5ZXJzIHdpbGwgbmVlZCB0bwpvdmVycmlkZSB0aGUgQ29udGVudC1UeXBlIChlLmcuIG11bHRpcGFydC9yZWxhdGVkLCBvciBhcHBsaWNhdGlvbi9kaW1lKS4KCj1iYWNrCgo9aGVhZDEgQUJTVFJBQ1QgTUVUSE9EUwoKSWYgeW91IHdpc2ggdG8gaW1wbGVtZW50IHlvdXIgb3duIFNPQVA6OlBhY2thZ2VyLCB0aGVuIHRoZSBtZXRob2RzIGJlbG93IG11c3QgYmUKaW1wbGVtZW50ZWQgYnkgeW91IGFjY29yZGluZyB0byB0aGUgcHJlc2NyaWJlZCBpbnB1dCBhbmQgb3V0cHV0IHJlcXVpcmVtZW50cy4KCj1vdmVyCgo9aXRlbSBwYWNrYWdlKCkKClRoZSBDPHBhY2thZ2U+IHN1YnJvdXRpbmUgdGFrZXMgYXMgaW5wdXQgdGhlIFNPQVAgZW52ZWxvcGUgaW4gc3RyaW5nL1NDQUxBUiBmb3JtLgpUaGlzIHdpbGwgc2VydmUgYXMgdGhlIGNvbnRlbnQgb2YgdGhlIHJvb3QgcGFydC4gVGhlIHBhY2thZ2VyIHRoZW4gZW5jYXBzdWxhdGVzIHRoZQplbnZlbG9wZSB3aXRoIHRoZSBwYXJ0cyBjb250YWluZWQgd2l0aGluIEM8cGFydHM+IGFuZCByZXR1cm5zIHRoZSBwcm9wZXJseQplbmNhcHN1bGF0ZWQgZW52ZWxvcGUgaW4gc3RyaW5nL1NDQUxBUiBmb3JtLgoKPWl0ZW0gdW5wYWNrYWdlKCkKClRoZSBDPHVucGFja2FnZT4gc3Vicm91dGluZXMgdGFrZXMgYXMgaW5wdXQgcmF3IGRhdGEgdGhhdCBuZWVkcyB0byBiZSBwYXJzZWQgaW50bwphIHNldCBvZiBwYXJ0cy4gSXQgaXMgcmVzcG9uc2libGUgZm9yIGV4dHJhY3RpbmcgdGhlIGVudmVsb3BlIGZyb20gdGhlIGlucHV0LCBhbmQKcG9wdWxhdGluZyBDPHBhcnRzPiB3aXRoIGFuIEFSUkFZIG9mIHBhcnRzIGV4dHJhY3RlZCBmcm9tIHRoZSBpbnB1dC4gSXQgdGhlbiByZXR1cm5zCnRoZSBTT0FQIEVudmVsb3BlIGluIHN0cmluZy9TQ0FMQVIgZm9ybSBzbyB0aGF0IFNPQVA6OkxpdGUgY2FuIHBhcnNlIGl0LgoKPWJhY2sKCj1oZWFkMSBTVVBQT1JURUQgUEFDS0FHSU5HIEZPUk1BVFMKCj1oZWFkMiBTT0FQOjpQYWNrYWdlcjo6TUlNRQoKQzxTT0FQOjpQYWNrYWdlcjo6TUlNRT4gdXRpbGl6ZXMgTDxNSU1FOjpUb29scz4gdG8gcHJvdmlkZXMgdGhlIGFiaWxpdHkgdG8gc2VuZAphbmQgcmVjZWl2ZSBNdWx0aXBhcnQvUmVsYXRlZCBhbmQgTXVsdGlwYXJ0L0Zvcm0tRGF0YSBmb3JtYXR0ZWQgcmVxdWVzdHMgYW5kCnJlc3BvbnNlcy4KCj1oZWFkMyBNSU1FIE1FVEhPRFMKClRoZSBmb2xsb3dpbmcgbWV0aG9kcyBhcmUgdXNlZCB3aGVuIGNvbXBvc2luZyBhIE1JTUUgZm9ybWF0dGVkIG1lc3NhZ2UuCgo9b3ZlcgoKPWl0ZW0gdHJhbnNmZXJfZW5jb2RpbmcKClRoZSB2YWx1ZSBvZiB0aGUgcm9vdCBwYXJ0J3MgQ29udGVudC1UcmFuc2Zlci1FbmNvZGluZyBNSU1FIEhlYWRlci4gRGVmYXVsdCBpczogOGJpdC4KCj1pdGVtIGVudl9pZAoKVGhlIHZhbHVlIG9mIHRoZSByb290IHBhcnQncyBDb250ZW50LUlkIE1JTUUgSGVhZGVyLiBEZWZhdWx0IGlzOiA8bWFpbl9lbnZlbG9wZT4uCgo9aXRlbSBlbnZfbG9jYXRpb24KClRoZSB2YWx1ZSBvZiB0aGUgcm9vdCBwYXJ0J3MgQ29udGVudC1Mb2NhdGlvbiBNSU1FIEhlYWRlci4gRGVmYXVsdCBpczogL21haW5fZW52ZWxvcGUuCgo9aXRlbSBlbnZfdHlwZQoKVGhlIHZhbHVlIG9mIHRoZSByb290IHBhcnQncyBDb250ZW50LVR5cGUgTUlNRSBIZWFkZXIuIERlZmF1bHQgaXM6IHRleHQveG1sLgoKPWJhY2sKCj1oZWFkMyBPUFRJTUlaSU5HIFRIRSBNSU1FIFBBUlNFUgoKVGhlIHVzZSBvZiBhdHRhY2htZW50cyBjYW4gb2Z0ZW4gcmVzdWx0IGluIGEgaGVhdnkgZHJhaW4gb24gc3lzdGVtIHJlc291cmNlcyBkZXBlbmRpbmcKdXBvbiBob3cgeW91ciBNSU1FIHBhcnNlciBpcyBjb25maWd1cmVkLiBGb3IgZXhhbXBsZSwgeW91IGNhbiBpbnN0cnVjdCB0aGUgcGFyc2VyIHRvCnN0b3JlIGF0dGFjaG1lbnRzIGluIG1lbW9yeSwgb3IgdG8gdXNlIHRlbXAgZmlsZXMuIFVzaW5nIG9uZSBvZiB0aGUgb3RoZXIgY2FuIGFmZmVjdApwZXJmb3JtYW5jZSwgZGlzayB1dGlsaXphdGlvbiwgYW5kL29yIHJlbGlhYmlsaXR5LiBUaGVyZWZvcmUgeW91IHNob3VsZCBjb25zdWx0IHRoZQpmb2xsb3dpbmcgVVJMIGZvciBvcHRpbWl6YXRpb24gdGVjaG5pcXVlcyBhbmQgdHJhZGUtb2ZmczoKCmh0dHA6Ly9zZWFyY2guY3Bhbi5vcmcvZGlzdC9NSU1FLXRvb2xzL2xpYi9NSU1FL1BhcnNlci5wbSNPUFRJTUlaSU5HX1lPVVJfUEFSU0VSCgpUbyBtb2RpZnkgdGhlIHBhcnNlcidzIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBjb25zdWx0IHRoZSBmb2xsb3dpbmcgY29kZSBzYW1wbGUsCndoaWNoIGluY2lkZW50YWxseSBzaG93cyBob3cgdG8gbWluaW1pemUgbWVtb3J5IHV0aWxpemF0aW9uOgoKICBteSAkcGFja2FnZXIgPSBTT0FQOjpQYWNrYWdlcjo6TUlNRS0+bmV3OwogICMgJHBhY2thZ2VyLT5wYXJzZXItPmRlY29kZV9oZWFkZXJzKDEpOyAjIG5vIGRpZmZlcmVuY2UKICAjICRwYWNrYWdlci0+cGFyc2VyLT5leHRyYWN0X25lc3RlZF9tZXNzYWdlcygxKTsgIyBubyBkaWZmZXJlbmNlCiAgJHBhY2thZ2VyLT5wYXJzZXItPm91dHB1dF90b19jb3JlKDApOyAjIG11Y2ggbGVzcyBtZW1vcnkKICAkcGFja2FnZXItPnBhcnNlci0+dG1wX3RvX2NvcmUoMCk7ICMgbXVjaCBsZXNzIG1lbW9yeQogICRwYWNrYWdlci0+cGFyc2VyLT50bXBfcmVjeWNsaW5nKDApOyAjIHByb21vdGVzIGZhc3RlciBnYXJiYWdlIGNvbGxlY3Rpb24KICAkcGFja2FnZXItPnBhcnNlci0+dXNlX2lubmVyX2ZpbGVzKDEpOyAjIG5vIGRpZmZlcmVuY2UKICBteSAkY2xpZW50ID0gU09BUDo6TGl0ZS0+dXJpKCROUyktPnByb3h5KCRVUkwpLT5wYWNrYWdlcigkcGFja2FnZXIpOwogICRjbGllbnQtPnNvbWVNZXRob2QoKTsKCj1oZWFkMyBDTElFTlQgU0lERSBFWEFNUExFCgpUaGUgZm9sbG93aW5nIGNvZGUgc2FtcGxlIHNob3dzIGhvdyB0byB1c2UgYXR0YWNobWVudHMgd2l0aGluIHRoZSBjb250ZXh0IG9mIGEKU09BUDo6TGl0ZSBjbGllbnQuCgogICMhL3Vzci9iaW4vcGVybAogIHVzZSBTT0FQOjpMaXRlOwogIHVzZSBNSU1FOjpFbnRpdHk7CiAgbXkgJGVudCA9IGJ1aWxkIE1JTUU6OkVudGl0eQogICAgVHlwZSAgICAgICAgPT4gInRleHQvcGxhaW4iLAogICAgUGF0aCAgICAgICAgPT4gImF0dGFjaG1lbnQudHh0IiwKICAgIEZpbGVuYW1lICAgID0+ICJhdHRhY2htZW50LnR4dCIsCiAgICBEaXNwb3NpdGlvbiA9PiAiYXR0YWNobWVudCI7CiAgJE5TID0gInVybjpNYWpvcmRvam86VGVtcGVyYXR1cmVTZXJ2aWNlIjsKICAkSE9TVCA9ICJodHRwOi8vbG9jYWxob3N0L2NnaS1iaW4vc29hcGxpdGUuY2dpIjsKICBteSAkY2xpZW50ID0gU09BUDo6TGl0ZQogICAgLT5wYWNrYWdlcihTT0FQOjpQYWNrYWdlcjo6TUlNRS0+bmV3KQogICAgLT5wYXJ0cyhbICRlbnQgXSkKICAgIC0+dXJpKCROUykKICAgIC0+cHJveHkoJEhPU1QpOwogICRyZXNwb25zZSA9ICRjbGllbnQtPmMyZihTT0FQOjpEYXRhLT5uYW1lKCJ0ZW1wZXJhdHVyZSIgPT4gJzEwMCcpKTsKICBwcmludCAkcmVzcG9uc2UtPnZhbHVlb2YoJy8vYzJmUmVzcG9uc2UvZm9vJyk7Cgo9aGVhZDMgU0VSVkVSIFNJREUgRVhBTVBMRQoKVGhlIGZvbGxvd2luZyBjb2RlIHNob3dzIGhvdyB0byB1c2UgYXR0YWNobWVudHMgd2l0aGluIHRoZSBjb250ZXh0IG9mIGEgQ0dJCnNjcmlwdC4gSXQgc2hvd3MgaG93IHRvIHJlYWQgaW5jb21pbmcgYXR0YWNobWVudHMsIGFuZCB0byByZXR1cm4gYXR0YWNobWVudHMgdG8KdGhlIGNsaWVudC4KCiAgIyEvdXNyL2Jpbi9wZXJsIC13CiAgdXNlIFNPQVA6OlRyYW5zcG9ydDo6SFRUUDsKICB1c2UgTUlNRTo6RW50aXR5OwogIFNPQVA6OlRyYW5zcG9ydDo6SFRUUDo6Q0dJCiAgICAtPnBhY2thZ2VyKFNPQVA6OlBhY2thZ2VyOjpNSU1FLT5uZXcpCiAgICAtPmRpc3BhdGNoX3dpdGgoeyd1cm46TWFqb3Jkb2pvOlRlbXBlcmF0dXJlU2VydmljZScgPT4gJ1RlbXBlcmF0dXJlU2VydmljZSd9KQogICAgLT5oYW5kbGU7CgogIEJFR0lOIHsKICAgIHBhY2thZ2UgVGVtcGVyYXR1cmVTZXJ2aWNlOwogICAgdXNlIHZhcnMgcXcoQElTQSk7CiAgICBASVNBID0gcXcoRXhwb3J0ZXIgU09BUDo6U2VydmVyOjpQYXJhbWV0ZXJzKTsKICAgIHVzZSBTT0FQOjpMaXRlOwogICAgc3ViIGMyZiB7CiAgICAgIG15ICRzZWxmID0gc2hpZnQ7CiAgICAgIG15ICRlbnZlbG9wZSA9IHBvcDsKICAgICAgbXkgJHRlbXAgPSAkZW52ZWxvcGUtPmRhdGFvZigiLy9jMmYvdGVtcGVyYXR1cmUiKTsKICAgICAgdXNlIE1JTUU6OkVudGl0eTsKICAgICAgbXkgJGVudCA9IGJ1aWxkIE1JTUU6OkVudGl0eQogICAgICAgIFR5cGUgICAgICAgID0+ICJ0ZXh0L3BsYWluIiwKICAgICAgICBQYXRoICAgICAgICA9PiAicHJpbnRlbnYiLAogICAgICAgIEZpbGVuYW1lICAgID0+ICJwcmludGVudiIsCiAgICAgICAgRGlzcG9zaXRpb24gPT4gImF0dGFjaG1lbnQiOwogICAgICAjIHJlYWQgYXR0YWNobWVudHMKICAgICAgZm9yZWFjaCBteSAkcGFydCAoQHskZW52ZWxvcGUtPnBhcnRzfSkgewogICAgICAgIHByaW50IFNUREVSUiAic29hcGxpdGUuY2dpOiBhdHRhY2htZW50IGZvdW5kISAoIi5yZWYoJHBhcnQpLiIpXG4iOwogICAgICAgIHByaW50IFNUREVSUiAic29hcGxpdGUuY2dpOiBjb250ZW50cyA9PiAiLiRwYXJ0LT5zdHJpbmdpZnkuIlxuIjsKICAgICAgfQogICAgICAjIHNlbmQgYXR0YWNobWVudHMKICAgICAgcmV0dXJuIFNPQVA6OkRhdGEtPm5hbWUoJ2NvbnZlcnRlZFRlbXAnID0+ICgoKDkvNSkqKCR0ZW1wLT52YWx1ZSkpICsgMzIpKSwKICAgICAgICAkZW50OwogICAgfQogIH0KCj1oZWFkMiBTT0FQOjpQYWNrYWdlcjo6RElNRQoKVE9ETwoKPWhlYWQxIFNFRSBBTFNPCgpMPE1JTUU6OlRvb2xzPiwgTDxESU1FOjpUb29scz4KCj1oZWFkMSBDT1BZUklHSFQKCkNvcHlyaWdodCAoQykgMjAwMC0yMDA0IFBhdWwgS3VsY2hlbmtvLiBBbGwgcmlnaHRzIHJlc2VydmVkLgoKVGhpcyBsaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKaXQgdW5kZXIgdGhlIHNhbWUgdGVybXMgYXMgUGVybCBpdHNlbGYuCgo9aGVhZDEgQVVUSE9SUwoKQnlybmUgUmVlc2UgKGJ5cm5lQG1ham9yZG9qby5jb20pCgo9Y3V0Cg==</File>
        <File Location="Kernel/cpan-lib/SOAP/Lite/Packager.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/cpan-lib/SOAP/Lite/Utils.pm" Permission="644" Encode="Base64">cGFja2FnZSBTT0FQOjpMaXRlOjpVdGlsczsKdXNlIHN0cmljdDsKCnN1YiBpbXBvcnQgewogICAgbXkgJGNhbGxlciA9IGNhbGxlcigpOwogICAgbm8gc3RyaWN0IHF3KHJlZnMpOwogICAgKnsgIiRjYWxsZXJcOjpfX21rX2FjY2Vzc29ycyIgfSA9IFwmX19ta19hY2Nlc3NvcnM7Cn0KCnN1YiBfX21rX2FjY2Vzc29ycyB7CiAgICBteSAoJGNsYXNzLCBAbWV0aG9kX2Zyb20pID0gQF87CiAgICBubyBzdHJpY3QgJ3JlZnMnOwogICAgZm9yIG15ICRtZXRob2QgKCBAbWV0aG9kX2Zyb20gKSB7CiAgICAgICAgbXkgJGZpZWxkID0gJ18nIC4gJG1ldGhvZDsKICAgICAgICAqeyAiJGNsYXNzXDo6JG1ldGhvZCIgfSA9IHN1YiB7CiAgICAgICAgICAgIG15ICRzZWxmID0gcmVmICRfWzBdID8gc2hpZnQgOiBzaGlmdC0+bmV3KCk7CiAgICAgICAgICAgIGlmIChAXykgewogICAgICAgICAgICAgICAgJHNlbGYtPnskZmllbGR9ID0gc2hpZnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gJHNlbGYKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gJHNlbGYtPnskZmllbGR9OwogICAgICAgIH0KICAgIH0KfQoKCjE7CgpfX0VORF9fCg==</File>
        <File Location="Kernel/cpan-lib/SOAP/Lite/Utils.pm" Permission="644" Encode="Base64">cGFja2FnZSBTT0FQOjpMaXRlOjpVdGlsczsKdXNlIHN0cmljdDsKCnN1YiBpbXBvcnQgewogICAgbXkgJGNhbGxlciA9IGNhbGxlcigpOwogICAgbm8gc3RyaWN0IHF3KHJlZnMpOwogICAgKnsgIiRjYWxsZXJcOjpfX21rX2FjY2Vzc29ycyIgfSA9IFwmX19ta19hY2Nlc3NvcnM7Cn0KCnN1YiBfX21rX2FjY2Vzc29ycyB7CiAgICBteSAoJGNsYXNzLCBAbWV0aG9kX2Zyb20pID0gQF87CiAgICBubyBzdHJpY3QgJ3JlZnMnOwogICAgZm9yIG15ICRtZXRob2QgKCBAbWV0aG9kX2Zyb20gKSB7CiAgICAgICAgbXkgJGZpZWxkID0gJ18nIC4gJG1ldGhvZDsKICAgICAgICAqeyAiJGNsYXNzXDo6JG1ldGhvZCIgfSA9IHN1YiB7CiAgICAgICAgICAgIG15ICRzZWxmID0gcmVmICRfWzBdID8gc2hpZnQgOiBzaGlmdC0+bmV3KCk7CiAgICAgICAgICAgIGlmIChAXykgewogICAgICAgICAgICAgICAgJHNlbGYtPnskZmllbGR9ID0gc2hpZnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gJHNlbGYKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gJHNlbGYtPnskZmllbGR9OwogICAgICAgIH0KICAgIH0KfQoKCjE7CgpfX0VORF9fCg==</File>
        <File Location="Kernel/cpan-lib/SOAP/Lite/Deserializer/XMLSchema1999.pm" Permission="644" Encode="Base64">cGFja2FnZSBTT0FQOjpMaXRlOjpEZXNlcmlhbGl6ZXI6OlhNTFNjaGVtYTE5OTk7CnVzZSBzdHJpY3Q7Cgp1c2UgU09BUDo6TGl0ZTo6RGVzZXJpYWxpemVyOjpYTUxTY2hlbWFTT0FQMV8xOwoKc3ViIGFueVR5cGVWYWx1ZSB7ICd1ci10eXBlJyB9CgojIHVzZSBhc19zdHJpbmcgYW5kIGFzX2Jvb2xlYW4gZnJvbSBTT0FQMV8xIERlc2VyaWFsaXplcgoKc3ViIGFzX3N0cmluZzsgKmFzX3N0cmluZyA9IFwmU09BUDo6TGl0ZTo6RGVzZXJpYWxpemVyOjpYTUxTY2hlbWFTT0FQMV8xOjphc19zdHJpbmc7CnN1YiBhc19ib29sZWFuOyAqYXNfYm9vbGVhbiA9IFwmU09BUDo6TGl0ZTo6RGVzZXJpYWxpemVyOjpYTUxTY2hlbWFTT0FQMV8xOjphc19ib29sZWFuOwoKc3ViIGFzX2hleCB7IAogICAgc2hpZnQ7IAogICAgbXkgJHZhbHVlID0gc2hpZnQ7IAogICAgJHZhbHVlID1+IHMvKFthLXpBLVowLTldezJ9KS9jaHIgb2N0ICcweCcuJDEvZ2U7IAogICAgJHZhbHVlIAp9CgpzdWIgYXNfdXJfdHlwZSB7ICRfWzFdIH0KCnN1YiBhc191bmRlZiB7CiAgICBzaGlmdDsKICAgIG15ICR2YWx1ZSA9IHNoaWZ0OwogICAgJHZhbHVlIGVxICcxJyB8fCAkdmFsdWUgZXEgJ3RydWUnCiAgICAgICAgPyAxIAogICAgICAgIDogJHZhbHVlIGVxICcwJyB8fCAkdmFsdWUgZXEgJ2ZhbHNlJwogICAgICAgICAgICA/IDAgCiAgICAgICAgICAgIDogZGllICJXcm9uZyBudWxsL25pbCB2YWx1ZSAnJHZhbHVlJ1xuIjsKfQoKQkVHSU4gewogICAgbm8gc3RyaWN0ICdyZWZzJzsKICAgIGZvciBteSAkbWV0aG9kIChxdygKICAgICAgICBmbG9hdCBkb3VibGUgZGVjaW1hbCB0aW1lRHVyYXRpb24gcmVjdXJyaW5nRHVyYXRpb24gdXJpUmVmZXJlbmNlCiAgICAgICAgaW50ZWdlciBub25Qb3NpdGl2ZUludGVnZXIgbmVnYXRpdmVJbnRlZ2VyIGxvbmcgaW50IHNob3J0IGJ5dGUKICAgICAgICBub25OZWdhdGl2ZUludGVnZXIgdW5zaWduZWRMb25nIHVuc2lnbmVkSW50IHVuc2lnbmVkU2hvcnQgdW5zaWduZWRCeXRlCiAgICAgICAgcG9zaXRpdmVJbnRlZ2VyIHRpbWVJbnN0YW50IHRpbWUgdGltZVBlcmlvZCBkYXRlIG1vbnRoIHllYXIgY2VudHVyeQogICAgICAgIHJlY3VycmluZ0RhdGUgcmVjdXJyaW5nRGF5IGxhbmd1YWdlCiAgICApKSB7CiAgICAgICAgbXkgJG5hbWUgPSAnYXNfJyAuICRtZXRob2Q7CiAgICAgICAgKiRuYW1lID0gc3ViIHsgJF9bMV0gfTsKICAgIH0KfQoKMTs=</File>
        <File Location="Kernel/cpan-lib/SOAP/Lite/Deserializer/XMLSchema2001.pm" Permission="644" Encode="Base64">cGFja2FnZSBTT0FQOjpMaXRlOjpEZXNlcmlhbGl6ZXI6OlhNTFNjaGVtYTIwMDE7Cgp1c2Ugc3RyaWN0Owp1c2UgU09BUDo6TGl0ZTo6RGVzZXJpYWxpemVyOjpYTUxTY2hlbWExOTk5Owp1c2UgU09BUDo6TGl0ZTo6RGVzZXJpYWxpemVyOjpYTUxTY2hlbWFTT0FQMV8xOwp1c2UgU09BUDo6TGl0ZTo6RGVzZXJpYWxpemVyOjpYTUxTY2hlbWFTT0FQMV8yOwoKc3ViIGFueVR5cGVWYWx1ZSB7ICdhbnlUeXBlJyB9CnN1YiBhc19zdHJpbmc7ICphc19zdHJpbmcgPSBcJlNPQVA6OkxpdGU6OkRlc2VyaWFsaXplcjo6WE1MU2NoZW1hMTk5OTo6YXNfc3RyaW5nOwpzdWIgYXNfYW55VVJJOyAqYXNfYW55VVJJID0gXCZTT0FQOjpMaXRlOjpEZXNlcmlhbGl6ZXI6OlhNTFNjaGVtYVNPQVAxXzE6OmFzX2FueVVSSTsKc3ViIGFzX2Jvb2xlYW47ICphc19ib29sZWFuID0gXCZTT0FQOjpMaXRlOjpEZXNlcmlhbGl6ZXI6OlhNTFNjaGVtYVNPQVAxXzI6OmFzX2Jvb2xlYW47CnN1YiBhc19iYXNlNjRCaW5hcnk7ICphc19iYXNlNjRCaW5hcnkgPSBcJlNPQVA6OkxpdGU6OkRlc2VyaWFsaXplcjo6WE1MU2NoZW1hU09BUDFfMjo6YXNfYmFzZTY0OwpzdWIgYXNfaGV4QmluYXJ5OyAqYXNfaGV4QmluYXJ5ID0gXCZTT0FQOjpMaXRlOjpEZXNlcmlhbGl6ZXI6OlhNTFNjaGVtYTE5OTk6OmFzX2hleDsKc3ViIGFzX3VuZGVmOyAqYXNfdW5kZWYgPSBcJlNPQVA6OkxpdGU6OkRlc2VyaWFsaXplcjo6WE1MU2NoZW1hMTk5OTo6YXNfdW5kZWY7CgpCRUdJTiB7CiAgICBubyBzdHJpY3QgJ3JlZnMnOwogICAgZm9yIG15ICRtZXRob2QgKHF3KAogICAgICAgIGFueVR5cGUgYW55U2ltcGxlVHlwZQogICAgICAgIGZsb2F0IGRvdWJsZSBkZWNpbWFsIGRhdGVUaW1lIHRpbWVQZXJpb2QgZ01vbnRoIGdZZWFyTW9udGggZ1llYXIgCiAgICAgICAgY2VudHVyeSBnTW9udGhEYXkgZ0RheSBkdXJhdGlvbiByZWN1cnJpbmdEdXJhdGlvbgogICAgICAgIGxhbmd1YWdlIGludGVnZXIgbm9uUG9zaXRpdmVJbnRlZ2VyIG5lZ2F0aXZlSW50ZWdlciBsb25nIGludCBzaG9ydCAKICAgICAgICBieXRlIG5vbk5lZ2F0aXZlSW50ZWdlciB1bnNpZ25lZExvbmcgdW5zaWduZWRJbnQgdW5zaWduZWRTaG9ydCAKICAgICAgICB1bnNpZ25lZEJ5dGUgcG9zaXRpdmVJbnRlZ2VyIGRhdGUgdGltZSBkYXRlVGltZQogICAgICAgIFFOYW1lCiAgICApKSB7CiAgICAgICAgbXkgJG5hbWUgPSAnYXNfJyAuICRtZXRob2Q7CiAgICAgICAgKiRuYW1lID0gc3ViIHsgJF9bMV0gfQogICAgfQp9CgoxOw==</File>
        <File Location="Kernel/cpan-lib/SOAP/Lite/Deserializer/XMLSchemaSOAP1_1.pm" Permission="644" Encode="Base64">cGFja2FnZSBTT0FQOjpMaXRlOjpEZXNlcmlhbGl6ZXI6OlhNTFNjaGVtYVNPQVAxXzE7CnVzZSBzdHJpY3Q7CgpzdWIgYW55VHlwZVZhbHVlIHsgJ3VyLXR5cGUnIH0KCnN1YiBhc19ib29sZWFuIHsgCiAgICBzaGlmdDsgCiAgICBteSAkdmFsdWUgPSBzaGlmdDsgCiAgICAkdmFsdWUgZXEgJzEnIHx8ICR2YWx1ZSBlcSAndHJ1ZScgCiAgICAgICAgPyAxIAogICAgICAgIDogJHZhbHVlIGVxICcwJyB8fCAkdmFsdWUgZXEgJ2ZhbHNlJyAKICAgICAgICAgICAgPyAwIAogICAgICAgICAgICA6IGRpZSAiV3JvbmcgYm9vbGVhbiB2YWx1ZSAnJHZhbHVlJ1xuIiAKfQoKc3ViIGFzX2Jhc2U2NCB7IHNoaWZ0OyByZXF1aXJlIE1JTUU6OkJhc2U2NDsgTUlNRTo6QmFzZTY0OjpkZWNvZGVfYmFzZTY0KHNoaWZ0KSB9CgpzdWIgYXNfdXJfdHlwZSB7ICRfWzFdIH0KCnN1YiBhc19hbnlVUkkgeyAkX1sxXSB9CgpCRUdJTiB7CiAgICBubyBzdHJpY3QgJ3JlZnMnOwogICAgZm9yIG15ICRtZXRob2QgKHF3KAogICAgICAgIHN0cmluZyBmbG9hdCBkb3VibGUgZGVjaW1hbCB0aW1lRHVyYXRpb24gcmVjdXJyaW5nRHVyYXRpb24gdXJpUmVmZXJlbmNlCiAgICAgICAgaW50ZWdlciBub25Qb3NpdGl2ZUludGVnZXIgbmVnYXRpdmVJbnRlZ2VyIGxvbmcgaW50IHNob3J0IGJ5dGUKICAgICAgICBub25OZWdhdGl2ZUludGVnZXIgdW5zaWduZWRMb25nIHVuc2lnbmVkSW50IHVuc2lnbmVkU2hvcnQgdW5zaWduZWRCeXRlCiAgICAgICAgcG9zaXRpdmVJbnRlZ2VyIHRpbWVJbnN0YW50IHRpbWUgdGltZVBlcmlvZCBkYXRlIG1vbnRoIHllYXIgY2VudHVyeSAKICAgICAgICByZWN1cnJpbmdEYXRlIHJlY3VycmluZ0RheSBsYW5ndWFnZQogICAgKSkgeyBteSAkbmFtZSA9ICdhc18nIC4gJG1ldGhvZDsgKiRuYW1lID0gc3ViIHsgJF9bMV0gfSB9Cn0KCjE7</File>
        <File Location="Kernel/cpan-lib/SOAP/Lite/Deserializer/XMLSchemaSOAP1_2.pm" Permission="644" Encode="Base64">cGFja2FnZSBTT0FQOjpMaXRlOjpEZXNlcmlhbGl6ZXI6OlhNTFNjaGVtYVNPQVAxXzI7CnVzZSBTT0FQOjpMaXRlOjpEZXNlcmlhbGl6ZXI6OlhNTFNjaGVtYVNPQVAxXzE7CgpzdWIgYW55VHlwZVZhbHVlIHsgJ2FueVR5cGUnIH0KCnN1YiBhc19ib29sZWFuOyAqYXNfYm9vbGVhbiA9IFwmU09BUDo6TGl0ZTo6RGVzZXJpYWxpemVyOjpYTUxTY2hlbWFTT0FQMV8xOjphc19ib29sZWFuOwpzdWIgYXNfYmFzZTY0IHsgc2hpZnQ7IHJlcXVpcmUgTUlNRTo6QmFzZTY0OyBNSU1FOjpCYXNlNjQ6OmRlY29kZV9iYXNlNjQoc2hpZnQpIH0KCkJFR0lOIHsKICAgIG5vIHN0cmljdCAncmVmcyc7CiAgICBmb3IgbXkgJG1ldGhvZCAocXcoCiAgICAgICAgYW55VHlwZQogICAgICAgIHN0cmluZyBmbG9hdCBkb3VibGUgZGVjaW1hbCBkYXRlVGltZSB0aW1lUGVyaW9kIGdNb250aCBnWWVhck1vbnRoIGdZZWFyCiAgICAgICAgY2VudHVyeSBnTW9udGhEYXkgZ0RheSBkdXJhdGlvbiByZWN1cnJpbmdEdXJhdGlvbiBhbnlVUkkKICAgICAgICBsYW5ndWFnZSBpbnRlZ2VyIG5vblBvc2l0aXZlSW50ZWdlciBuZWdhdGl2ZUludGVnZXIgbG9uZyBpbnQgc2hvcnQgYnl0ZQogICAgICAgIG5vbk5lZ2F0aXZlSW50ZWdlciB1bnNpZ25lZExvbmcgdW5zaWduZWRJbnQgdW5zaWduZWRTaG9ydCB1bnNpZ25lZEJ5dGUKICAgICAgICBwb3NpdGl2ZUludGVnZXIgZGF0ZSB0aW1lIGRhdGVUaW1lCiAgICApKSB7CiAgICAgICAgbXkgJG5hbWUgPSAnYXNfJyAuICRtZXRob2Q7IAogICAgICAgICokbmFtZSA9IHN1YiB7ICRfWzFdIH07IAogICAgfQp9CgoxOw==</File>
        <File Location="Kernel/cpan-lib/SOAP/Transport/HTTP.pm" Permission="644" Encode="Base64"></File>
    </Filelist>
</otrs_package>